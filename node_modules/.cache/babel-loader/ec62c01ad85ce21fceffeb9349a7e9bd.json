{"ast":null,"code":"import { doRequest } from './request';\nexport const getFilterRequest = () => {\n  const query = `query genres \"Genres\" {\n        fields name, created_at, slug;\n        sort created_at asc;\n        limit 500;\n    };\n    query game_modes \"Modes\" {\n        fields name, updated_at, slug;\n        sort updated_at asc;\n        limit 500;\n    };\n    query player_perspectives \"Perspectives\" {\n        fields name, slug;\n        limit 500;\n    };`;\n  return doRequest(\"/multiquery\", query);\n};\nexport const searchByNameRequest = (endpoint, searchEntry, exclude) => {\n  const excludeString = exclude === null || exclude === void 0 ? void 0 : exclude.map(elem => `${elem}`).join(\",\");\n  const excludeQuery = excludeString ? `& id != (${excludeString})` : \"\";\n  const query = `fields name,slug;\n                    where name ~ *\"${searchEntry}\"* ${excludeQuery};\n                    limit 500;`;\n  return doRequest(endpoint, query);\n};\nexport const searchRequest = filterQuery => {\n  const whereCondition = filterQuery ? \"where \" + filterQuery : \"\";\n  const query = `fields name, platforms, game_modes, genres.slug, platforms.name, platforms.platform_logo.image_id, rating, game_modes.slug, game_engines.slug, involved_companies.developer, involved_companies.company.name, player_perspectives.slug, first_release_date, release_dates.*, cover.image_id, aggregated_rating;\n    ${whereCondition} & first_release_date != null;\n    sort first_release_date desc;\n    limit 50;`; // console.log(\"QUUUERTT\", query);\n\n  return doRequest(\"/games\", query);\n};\nexport const correctIdsRequest = genQuery => {\n  const queryArray = [];\n  genQuery.forEach(value => {\n    const query = `query ${value.endpoint} \"${value.name}\" {\n        fields ${value.fields};\n        where ${value.condition};\n        limit 50;};`;\n    queryArray.push(query);\n  });\n  const query = queryArray.join(\" \"); // console.log(\"QUERY\", query);\n\n  return doRequest(\"/multiquery\", query);\n};","map":{"version":3,"sources":["/Users/bdeguigne/Documents/Game Bringer/src/redux/services/filtersService.js"],"names":["doRequest","getFilterRequest","query","searchByNameRequest","endpoint","searchEntry","exclude","excludeString","map","elem","join","excludeQuery","searchRequest","filterQuery","whereCondition","correctIdsRequest","genQuery","queryArray","forEach","value","name","fields","condition","push"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClC,QAAMC,KAAK,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAbI;AAeA,SAAOF,SAAS,CAAC,aAAD,EAAgBE,KAAhB,CAAhB;AACH,CAjBM;AAmBP,OAAO,MAAMC,mBAAmB,GAAG,CAACC,QAAD,EAAWC,WAAX,EAAwBC,OAAxB,KAAoC;AACnE,QAAMC,aAAa,GAAGD,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEE,GAAT,CAAaC,IAAI,IAAK,GAAEA,IAAK,EAA7B,EAAgCC,IAAhC,CAAqC,GAArC,CAAtB;AACA,QAAMC,YAAY,GAAGJ,aAAa,GAAI,YAAWA,aAAc,GAA7B,GAAkC,EAApE;AAEA,QAAML,KAAK,GAAI;AACnB,qCAAqCG,WAAY,MAAKM,YAAa;AACnE,+BAFI;AAIA,SAAOX,SAAS,CAACI,QAAD,EAAWF,KAAX,CAAhB;AACH,CATM;AAWP,OAAO,MAAMU,aAAa,GAAIC,WAAD,IAAiB;AAC1C,QAAMC,cAAc,GAAGD,WAAW,GAAG,WAAWA,WAAd,GAA4B,EAA9D;AAEA,QAAMX,KAAK,GAAI;AACnB,MAAMY,cAAe;AACrB;AACA,cAHI,CAH0C,CAQ1C;;AAEA,SAAOd,SAAS,CAAC,QAAD,EAAWE,KAAX,CAAhB;AACH,CAXM;AAaP,OAAO,MAAMa,iBAAiB,GAAIC,QAAD,IAAc;AAC3C,QAAMC,UAAU,GAAG,EAAnB;AACAD,EAAAA,QAAQ,CAACE,OAAT,CAAiBC,KAAK,IAAI;AACtB,UAAMjB,KAAK,GAAI,SAAQiB,KAAK,CAACf,QAAS,KAAIe,KAAK,CAACC,IAAK;AAC7D,iBAAiBD,KAAK,CAACE,MAAO;AAC9B,gBAAgBF,KAAK,CAACG,SAAU;AAChC,oBAHQ;AAKAL,IAAAA,UAAU,CAACM,IAAX,CAAgBrB,KAAhB;AACH,GAPD;AASA,QAAMA,KAAK,GAAGe,UAAU,CAACP,IAAX,CAAgB,GAAhB,CAAd,CAX2C,CAa3C;;AACA,SAAOV,SAAS,CAAC,aAAD,EAAgBE,KAAhB,CAAhB;AACH,CAfM","sourcesContent":["import { doRequest } from './request';\n\nexport const getFilterRequest = () => {\n    const query = `query genres \"Genres\" {\n        fields name, created_at, slug;\n        sort created_at asc;\n        limit 500;\n    };\n    query game_modes \"Modes\" {\n        fields name, updated_at, slug;\n        sort updated_at asc;\n        limit 500;\n    };\n    query player_perspectives \"Perspectives\" {\n        fields name, slug;\n        limit 500;\n    };`\n\n    return doRequest(\"/multiquery\", query);\n}\n\nexport const searchByNameRequest = (endpoint, searchEntry, exclude) => {\n    const excludeString = exclude?.map(elem => `${elem}`).join(\",\");\n    const excludeQuery = excludeString ? `& id != (${excludeString})` : \"\";\n\n    const query = `fields name,slug;\n                    where name ~ *\"${searchEntry}\"* ${excludeQuery};\n                    limit 500;`\n\n    return doRequest(endpoint, query);\n}\n\nexport const searchRequest = (filterQuery) => {\n    const whereCondition = filterQuery ? \"where \" + filterQuery : \"\";\n\n    const query = `fields name, platforms, game_modes, genres.slug, platforms.name, platforms.platform_logo.image_id, rating, game_modes.slug, game_engines.slug, involved_companies.developer, involved_companies.company.name, player_perspectives.slug, first_release_date, release_dates.*, cover.image_id, aggregated_rating;\n    ${whereCondition} & first_release_date != null;\n    sort first_release_date desc;\n    limit 50;`\n\n    // console.log(\"QUUUERTT\", query);\n\n    return doRequest(\"/games\", query)\n}\n\nexport const correctIdsRequest = (genQuery) => {\n    const queryArray = [];\n    genQuery.forEach(value => {\n        const query = `query ${value.endpoint} \"${value.name}\" {\n        fields ${value.fields};\n        where ${value.condition};\n        limit 50;};`\n\n        queryArray.push(query);\n    })\n\n    const query = queryArray.join(\" \");\n\n    // console.log(\"QUERY\", query);\n    return doRequest(\"/multiquery\", query);\n}"]},"metadata":{},"sourceType":"module"}