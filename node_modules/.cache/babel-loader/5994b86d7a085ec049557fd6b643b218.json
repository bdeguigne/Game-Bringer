{"ast":null,"code":"import { homePageRequestsConstants } from \"../constants/homePageRequestsConstants\";\nimport { getPopularGameRequest, getRecentlyReleasedRequest, getComingSoonGamesRequest, getBestRatedGamesRequest } from \"../services/homePageRequestsServices\";\nimport { findDeveloper, getElapsedTime, getRandom, getVideoTrailer } from '../../utils/requestFormat';\n\nconst grabGameData = games => {\n  let storedIds = [];\n  let gamesData = [];\n  games.forEach(game => {\n    if (game.game) {\n      const gameID = game.game.id; //Check if the game is not already added\n\n      if (gameID && !storedIds.includes(gameID)) {\n        const id = game.game.id;\n        const gameName = game.game.name;\n        const coverID = game.game.cover ? game.game.cover.image_id : null;\n        const genres = game.game.genres;\n        const screenshots = game.game.screenshots;\n        const releasedDate = getElapsedTime({\n          date: game.date,\n          category: game.category,\n          human: game.human\n        });\n        const rating = Math.round(game.game.aggregated_rating);\n        gamesData.push({\n          gameName,\n          coverID,\n          genres,\n          screenshots,\n          releasedDate,\n          rating,\n          id\n        });\n        storedIds.push(gameID);\n      }\n    }\n  });\n  return gamesData;\n};\n\nexport const getPopularGames = () => {\n  return dispatch => {\n    getPopularGameRequest().then(res => res.json()).then(res => {\n      const popularGamesData = []; // console.log(\"POPULAR RES \", res);\n\n      res.forEach(popularGame => {\n        const id = popularGame.id;\n        const game = popularGame.name;\n        const rating = Math.round(popularGame.aggregated_rating);\n        const genres = popularGame.genres;\n        const screenshotID = popularGame.screenshots ? popularGame.screenshots[Math.floor(Math.random() * popularGame.screenshots.length)].image_id : null;\n        const videoID = getVideoTrailer(popularGame.videos);\n        const releaseDate = getElapsedTime(popularGame.release_dates, popularGame.first_release_date);\n        const company = findDeveloper(popularGame.involved_companies);\n        const screenshots = popularGame.screenshots;\n        const summary = popularGame.summary;\n\n        if (videoID !== null || screenshotID !== null) {\n          popularGamesData.push({\n            game,\n            rating,\n            genres,\n            screenshotID,\n            company,\n            releaseDate,\n            videoID,\n            screenshots,\n            summary,\n            id\n          });\n        }\n      });\n      dispatch({\n        type: homePageRequestsConstants.SET_POPULAR_GAMES,\n        popularGames: getRandom(popularGamesData, 10)\n      });\n    }).catch(error => console.log(\"getPopularGames error\", error));\n  };\n};\nexport const getRecentlyReleasedGames = () => {\n  return dispatch => {\n    getRecentlyReleasedRequest(30).then(res => res.json()).then(res => {\n      let games = grabGameData(res);\n      dispatch({\n        type: homePageRequestsConstants.SET_RECENTLY_RELEASED_GAMES,\n        games\n      });\n    }).catch(error => console.log(\"getRecentlyReleasedGames error\", error));\n  };\n};\nexport const getComingSoonGames = () => {\n  return dispatch => {\n    getComingSoonGamesRequest(30).then(res => res.json()).then(res => {\n      let games = grabGameData(res);\n      dispatch({\n        type: homePageRequestsConstants.SET_COMING_SOON_GAMES,\n        games\n      });\n    }).catch(error => console.log(\"getComingSoonGames error\", error));\n  };\n}; //Best rated games : this month/last 6 months/this year/all time/\n\nexport const getBestRatedGames = time => {\n  return dispatch => {\n    getBestRatedGamesRequest(time, 10).then(res => res.json()).then(res => {\n      const bestRatedGamesData = [];\n      res.forEach(bestRatedGame => {\n        const id = bestRatedGame.id;\n        const game = bestRatedGame.name;\n        const rating = Math.round(bestRatedGame.aggregated_rating);\n        const genres = bestRatedGame.genres;\n        const screenshots = bestRatedGame.screenshots;\n        const company = findDeveloper(bestRatedGame.involved_companies);\n        const releaseDate = getElapsedTime(bestRatedGame.release_dates, bestRatedGame.first_release_date);\n        const summary = bestRatedGame.summary;\n        bestRatedGamesData.push({\n          game,\n          rating,\n          genres,\n          screenshots,\n          company,\n          releaseDate,\n          summary,\n          id\n        });\n      });\n      dispatch({\n        type: time,\n        games: bestRatedGamesData\n      });\n    }).catch(error => console.log(\"getBestRatedGames \", error));\n  };\n};","map":{"version":3,"sources":["/Users/bdeguigne/Downloads/backup onedrive de mort/Game Bringer/src/redux/actions/homePageRequestsActions.js"],"names":["homePageRequestsConstants","getPopularGameRequest","getRecentlyReleasedRequest","getComingSoonGamesRequest","getBestRatedGamesRequest","findDeveloper","getElapsedTime","getRandom","getVideoTrailer","grabGameData","games","storedIds","gamesData","forEach","game","gameID","id","includes","gameName","name","coverID","cover","image_id","genres","screenshots","releasedDate","date","category","human","rating","Math","round","aggregated_rating","push","getPopularGames","dispatch","then","res","json","popularGamesData","popularGame","screenshotID","floor","random","length","videoID","videos","releaseDate","release_dates","first_release_date","company","involved_companies","summary","type","SET_POPULAR_GAMES","popularGames","catch","error","console","log","getRecentlyReleasedGames","SET_RECENTLY_RELEASED_GAMES","getComingSoonGames","SET_COMING_SOON_GAMES","getBestRatedGames","time","bestRatedGamesData","bestRatedGame"],"mappings":"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","sourcesContent":["import { homePageRequestsConstants } from \"../constants/homePageRequestsConstants\";\nimport { getPopularGameRequest, getRecentlyReleasedRequest, getComingSoonGamesRequest, getBestRatedGamesRequest } from \"../services/homePageRequestsServices\";\nimport { findDeveloper, getElapsedTime, getRandom, getVideoTrailer} from '../../utils/requestFormat'\n\nconst grabGameData = (games) => {\n    let storedIds = [];\n    let gamesData = [];\n\n    games.forEach(game => {\n        if (game.game) {\n\n            const gameID = game.game.id;\n\n            //Check if the game is not already added\n            if (gameID && !storedIds.includes(gameID)) {\n                const id = game.game.id;\n                const gameName = game.game.name;\n                const coverID = game.game.cover ? game.game.cover.image_id : null;\n                const genres = game.game.genres;\n                const screenshots = game.game.screenshots;\n                const releasedDate = getElapsedTime({date: game.date, category: game.category, human: game.human});\n                const rating = Math.round(game.game.aggregated_rating);\n\n                gamesData.push({\n                    gameName,\n                    coverID,\n                    genres,\n                    screenshots,\n                    releasedDate,\n                    rating,\n                    id\n                })\n                storedIds.push(gameID);\n            }\n        }\n\n    })\n\n    return gamesData;\n}\n\n\nexport const getPopularGames = () => {\n    return (dispatch) => {\n        getPopularGameRequest()\n            .then(res => res.json())\n            .then(res => {\n                const popularGamesData = [];\n                // console.log(\"POPULAR RES \", res);\n                res.forEach(popularGame => {\n                    const id = popularGame.id;\n                    const game = popularGame.name;\n                    const rating = Math.round(popularGame.aggregated_rating);\n                    const genres = popularGame.genres;\n                    const screenshotID = popularGame.screenshots ?  (popularGame.screenshots[Math.floor(Math.random() * popularGame.screenshots.length)]).image_id : null;\n                    const videoID = getVideoTrailer(popularGame.videos);\n                    const releaseDate = getElapsedTime(popularGame.release_dates, popularGame.first_release_date);\n                    const company = findDeveloper(popularGame.involved_companies);\n                    const screenshots = popularGame.screenshots;\n                    const summary = popularGame.summary;\n\n                    if (videoID !== null || screenshotID !== null) {\n                        popularGamesData.push({\n                            game,\n                            rating,\n                            genres,\n                            screenshotID,\n                            company,\n                            releaseDate,\n                            videoID,\n                            screenshots,\n                            summary,\n                            id\n                        })\n                    }\n                })\n\n                dispatch({\n                    type: homePageRequestsConstants.SET_POPULAR_GAMES,\n                    popularGames: getRandom(popularGamesData, 10)\n                })\n\n            })\n            .catch(error => console.log(\"getPopularGames error\", error));\n    }\n}\n\n\nexport const getRecentlyReleasedGames = () => {\n    return dispatch => {\n        getRecentlyReleasedRequest(30)\n            .then(res => res.json())\n            .then(res => {\n                let games = grabGameData(res);\n\n                dispatch({\n                    type: homePageRequestsConstants.SET_RECENTLY_RELEASED_GAMES,\n                    games\n                })\n            })\n            .catch(error => console.log(\"getRecentlyReleasedGames error\", error))\n    }\n}\n\nexport const getComingSoonGames = () => {\n    return dispatch => {\n        getComingSoonGamesRequest(30)\n            .then(res => res.json())\n            .then(res => {\n                let games = grabGameData(res);\n\n                dispatch({\n                    type: homePageRequestsConstants.SET_COMING_SOON_GAMES,\n                    games\n                })\n            })\n            .catch(error => console.log(\"getComingSoonGames error\", error))\n    }\n}\n\n//Best rated games : this month/last 6 months/this year/all time/\nexport const getBestRatedGames = (time) => {\n    return dispatch => {\n        getBestRatedGamesRequest(time, 10)\n            .then(res => res.json())\n            .then(res => {\n                const bestRatedGamesData = [];\n                res.forEach(bestRatedGame => {\n                    const id = bestRatedGame.id;\n                    const game = bestRatedGame.name;\n                    const rating = Math.round(bestRatedGame.aggregated_rating);\n                    const genres = bestRatedGame.genres;\n                    const screenshots = bestRatedGame.screenshots;\n                    const company = findDeveloper(bestRatedGame.involved_companies);\n                    const releaseDate = getElapsedTime(bestRatedGame.release_dates, bestRatedGame.first_release_date);\n                    const summary = bestRatedGame.summary;\n\n                    bestRatedGamesData.push({\n                        game,\n                        rating,\n                        genres,\n                        screenshots,\n                        company,\n                        releaseDate,\n                        summary,\n                        id\n                    })\n                })\n                dispatch({\n                    type: time,\n                    games: bestRatedGamesData\n                })\n            })\n            .catch(error => console.log(\"getBestRatedGames \", error))\n    }\n}"]},"metadata":{},"sourceType":"module"}