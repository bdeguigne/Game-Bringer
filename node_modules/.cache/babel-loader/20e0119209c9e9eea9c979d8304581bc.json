{"ast":null,"code":"import { doRequest } from \"./request\";\nimport moment from \"moment\";\nimport { bestRatedGames } from \"../constants/homePageRequestsConstants\"; // Popular Game = follows > 1 || external rating > 1 for the last 3 months\n\nexport const getPopularGameRequest = () => {\n  const last3MonthsUnix = moment().subtract(3, \"months\").unix();\n  let query = `fields name, follows, genres.name, involved_companies.developer, involved_companies.company.name, involved_companies.company.logo.image_id, aggregated_rating, screenshots.image_id, videos.video_id, videos.name, rating_count, first_release_date, release_dates.human, release_dates.date, release_dates.category, summary;\n                sort follows desc;\n                where first_release_date > ${last3MonthsUnix} & (follows > 1 | rating_count > 1);\n                limit 500;`;\n  return doRequest(\"/games\", query);\n};\nexport const getRecentlyReleasedRequest = limit => {\n  const nowUnix = moment().unix();\n  const lastMonthUnix = moment().subtract(1, \"months\").unix();\n  let query = `fields human, date, category, game.name, game.cover.image_id, game.genres.name, game.aggregated_rating, game.screenshots.image_id;\n                where date > ${lastMonthUnix} & date < ${nowUnix};\n                sort date desc;\n                limit ${limit};`;\n  return doRequest(\"/release_dates\", query);\n};\nexport const getComingSoonGamesRequest = limit => {\n  const nowUnix = moment().unix();\n  let query = `fields human, date, category, game.name, game.cover.image_id, game.genres.name, game.aggregated_rating, game.screenshots.image_id;\n                sort date asc;\n                where date > ${nowUnix} & category = 0;\n                limit ${limit};`;\n  return doRequest(\"/release_dates\", query);\n}; //Best rated games : this month/last 6 months/this year/all time/\n\nexport const getBestRatedGamesRequest = (time, limit) => {\n  let unixDate;\n\n  if (time === bestRatedGames.THIS_MONTH) {\n    unixDate = moment().subtract(1, \"months\").unix();\n  } else if (time === bestRatedGames.LAST_6_MONTHS) {\n    unixDate = moment().subtract(6, \"months\").unix();\n  } else if (time === bestRatedGames.THIS_YEAR) {\n    unixDate = moment().subtract(1, \"year\").unix();\n  } else {\n    return false;\n  }\n\n  const query = `fields name, follows, aggregated_rating, first_release_date, release_dates.human, release_dates.date, genres.name, involved_companies.developer, involved_companies.company.name, involved_companies.company.logo.image_id, screenshots.image_id, summary, release_dates.category;\n                    sort aggregated_rating desc;\n                    where first_release_date > ${unixDate} & aggregated_rating != null;\n                    limit ${limit};`;\n  return doRequest(\"/games\", query);\n};","map":{"version":3,"sources":["/Users/bdeguigne/Downloads/backup onedrive de mort/Game Bringer/src/redux/services/homePageRequestsServices.js"],"names":["doRequest","moment","bestRatedGames","getPopularGameRequest","last3MonthsUnix","subtract","unix","query","getRecentlyReleasedRequest","limit","nowUnix","lastMonthUnix","getComingSoonGamesRequest","getBestRatedGamesRequest","time","unixDate","THIS_MONTH","LAST_6_MONTHS","THIS_YEAR"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,WAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAAQC,cAAR,QAA6B,wCAA7B,C,CAEA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAM;AACvC,QAAMC,eAAe,GAAGH,MAAM,GAAGI,QAAT,CAAkB,CAAlB,EAAqB,QAArB,EAA+BC,IAA/B,EAAxB;AAEA,MAAIC,KAAK,GAAI;AACjB;AACA,6CAA6CH,eAAgB;AAC7D,2BAHI;AAKA,SAAOJ,SAAS,CAAC,QAAD,EAAWO,KAAX,CAAhB;AACH,CATM;AAWP,OAAO,MAAMC,0BAA0B,GAAIC,KAAD,IAAW;AACjD,QAAMC,OAAO,GAAGT,MAAM,GAAGK,IAAT,EAAhB;AACA,QAAMK,aAAa,GAAGV,MAAM,GAAGI,QAAT,CAAkB,CAAlB,EAAqB,QAArB,EAA+BC,IAA/B,EAAtB;AAEA,MAAIC,KAAK,GAAI;AACjB,+BAA+BI,aAAc,aAAYD,OAAQ;AACjE;AACA,wBAAwBD,KAAM,GAH1B;AAKA,SAAOT,SAAS,CAAC,gBAAD,EAAmBO,KAAnB,CAAhB;AACH,CAVM;AAYP,OAAO,MAAMK,yBAAyB,GAAIH,KAAD,IAAW;AAChD,QAAMC,OAAO,GAAGT,MAAM,GAAGK,IAAT,EAAhB;AAEA,MAAIC,KAAK,GAAI;AACjB;AACA,+BAA+BG,OAAQ;AACvC,wBAAwBD,KAAM,GAH1B;AAKA,SAAOT,SAAS,CAAC,gBAAD,EAAmBO,KAAnB,CAAhB;AACH,CATM,C,CAWP;;AACA,OAAO,MAAMM,wBAAwB,GAAG,CAACC,IAAD,EAAOL,KAAP,KAAiB;AACrD,MAAIM,QAAJ;;AACA,MAAID,IAAI,KAAKZ,cAAc,CAACc,UAA5B,EAAwC;AACpCD,IAAAA,QAAQ,GAAGd,MAAM,GAAGI,QAAT,CAAkB,CAAlB,EAAqB,QAArB,EAA+BC,IAA/B,EAAX;AACH,GAFD,MAEO,IAAIQ,IAAI,KAAKZ,cAAc,CAACe,aAA5B,EAA2C;AAC9CF,IAAAA,QAAQ,GAAGd,MAAM,GAAGI,QAAT,CAAkB,CAAlB,EAAqB,QAArB,EAA+BC,IAA/B,EAAX;AACH,GAFM,MAEA,IAAIQ,IAAI,KAAKZ,cAAc,CAACgB,SAA5B,EAAuC;AAC1CH,IAAAA,QAAQ,GAAGd,MAAM,GAAGI,QAAT,CAAkB,CAAlB,EAAqB,MAArB,EAA6BC,IAA7B,EAAX;AACH,GAFM,MAEA;AACH,WAAO,KAAP;AACH;;AACD,QAAMC,KAAK,GAAI;AACnB;AACA,iDAAiDQ,QAAS;AAC1D,4BAA4BN,KAAM,GAH9B;AAKA,SAAOT,SAAS,CAAC,QAAD,EAAWO,KAAX,CAAhB;AAEH,CAlBM","sourcesContent":["import {doRequest} from \"./request\";\nimport moment from \"moment\";\nimport {bestRatedGames} from \"../constants/homePageRequestsConstants\"\n\n// Popular Game = follows > 1 || external rating > 1 for the last 3 months\nexport const getPopularGameRequest = () => {\n    const last3MonthsUnix = moment().subtract(3, \"months\").unix();\n\n    let query = `fields name, follows, genres.name, involved_companies.developer, involved_companies.company.name, involved_companies.company.logo.image_id, aggregated_rating, screenshots.image_id, videos.video_id, videos.name, rating_count, first_release_date, release_dates.human, release_dates.date, release_dates.category, summary;\n                sort follows desc;\n                where first_release_date > ${last3MonthsUnix} & (follows > 1 | rating_count > 1);\n                limit 500;`\n\n    return doRequest(\"/games\", query);\n}\n\nexport const getRecentlyReleasedRequest = (limit) => {\n    const nowUnix = moment().unix();\n    const lastMonthUnix = moment().subtract(1, \"months\").unix();\n\n    let query = `fields human, date, category, game.name, game.cover.image_id, game.genres.name, game.aggregated_rating, game.screenshots.image_id;\n                where date > ${lastMonthUnix} & date < ${nowUnix};\n                sort date desc;\n                limit ${limit};`;\n\n    return doRequest(\"/release_dates\", query);\n}\n\nexport const getComingSoonGamesRequest = (limit) => {\n    const nowUnix = moment().unix();\n\n    let query = `fields human, date, category, game.name, game.cover.image_id, game.genres.name, game.aggregated_rating, game.screenshots.image_id;\n                sort date asc;\n                where date > ${nowUnix} & category = 0;\n                limit ${limit};`;\n\n    return doRequest(\"/release_dates\", query);\n}\n\n//Best rated games : this month/last 6 months/this year/all time/\nexport const getBestRatedGamesRequest = (time, limit) => {\n    let unixDate;\n    if (time === bestRatedGames.THIS_MONTH) {\n        unixDate = moment().subtract(1, \"months\").unix();\n    } else if (time === bestRatedGames.LAST_6_MONTHS) {\n        unixDate = moment().subtract(6, \"months\").unix();\n    } else if (time === bestRatedGames.THIS_YEAR) {\n        unixDate = moment().subtract(1, \"year\").unix();\n    } else {\n        return false;\n    }\n    const query = `fields name, follows, aggregated_rating, first_release_date, release_dates.human, release_dates.date, genres.name, involved_companies.developer, involved_companies.company.name, involved_companies.company.logo.image_id, screenshots.image_id, summary, release_dates.category;\n                    sort aggregated_rating desc;\n                    where first_release_date > ${unixDate} & aggregated_rating != null;\n                    limit ${limit};`\n\n    return doRequest(\"/games\", query);\n\n}"]},"metadata":{},"sourceType":"module"}