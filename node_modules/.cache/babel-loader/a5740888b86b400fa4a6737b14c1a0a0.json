{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bdeguigne/Documents/Game Bringer/src/components/Advanced Search/HandleFilters.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"; // import Collapsable from './Collapsable';\n\nimport { filters, addAndGroupElem, isFiltersExist, replaceTerm, findValueFromQuery, removeTerm } from './filters';\nimport CheckboxFilter from './CheckboxFilter';\nimport { connect } from 'react-redux';\nimport { appColors } from \"../../utils/styles\";\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { ExpandMore, ChevronLeft } from '@material-ui/icons';\nimport { correctIds } from '../../redux/actions/filtersActions';\nconst FiltersContainer = styled.div`\n    width: 238px;\n    margin-left: 16px;\n`;\n_c = FiltersContainer;\nconst Divider = styled.hr`\n    margin: 8px auto;\n    width: 80%;\n    border: 1px solid ${appColors[700]};\n    opacity: 0.6;\n    border-radius: 5px;\n`;\n_c2 = Divider;\nconst LargeTreeView = styled(TreeView)`\n    width: 238px;\n`;\n_c3 = LargeTreeView;\nconst SeeAllButton = styled.div`\n    cursor: pointer;\n    text-transform: uppercase;\n    color: ${appColors.primarySimple};\n`;\n_c4 = SeeAllButton;\nconst TreeWrapper = styled.div`\n     margin-bottom: 16px;\n`;\n_c5 = TreeWrapper;\nconst SeeAllContainer = styled.div`\n    margin-top: 4px;\n    width: 100%;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    user-select: none;\n    font-size: 12px;\n`;\n_c6 = SeeAllContainer;\nconst DoubleArrowIcon = styled.span`\n    font-size: 14px !important;\n    margin-left: 4px;\n    transform: rotate(-90deg);\n    color: ${appColors.primarySimple};\n`;\n_c7 = DoubleArrowIcon;\n\nfunction HandleFilters(props) {\n  _s();\n\n  const [expand, setExpand] = useState([]);\n  const [activatedFilters, setActivatedFilters] = useState(null);\n  const [loadedFilters, setLoadedFilters] = useState([]);\n  const [collapseIds, setCollapseIds] = useState([]);\n  const [expandIds, setExpandIds] = useState([]);\n  const [correctChipIds, setCorrectChipIds] = useState(false);\n  const [isFiltersLoaded, setIsFiltersLoaded] = useState(false);\n\n  const addActivatedFilters = data => {\n    let replace = false;\n    const filter = data.front;\n\n    if (filter.replace) {\n      replace = filter.replace;\n    }\n\n    const res = addAndGroupElem(activatedFilters, filter.type, filter.data, filter.label, replace);\n    setActivatedFilters(res);\n    onChange();\n  };\n\n  const removeActivatedFilters = (toRemoved, titleSlug) => {\n    setActivatedFilters(removeTerm(toRemoved.slug, toRemoved.label, titleSlug, activatedFilters));\n    onChange();\n  };\n\n  const onChange = useCallback(() => {\n    if (props.onChange && activatedFilters) {\n      props.onChange(activatedFilters);\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [activatedFilters]);\n  useEffect(() => {\n    if (props.queryFilters && Object.keys(props.queryFilters).length !== 0 && !activatedFilters) {\n      setActivatedFilters({\n        front: props.queryFilters,\n        chip: JSON.parse(JSON.stringify(props.queryFilters))\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [props.queryFilters]);\n  useEffect(() => {\n    if (props.term !== \"\") {\n      setActivatedFilters(replaceTerm(activatedFilters, props.term));\n      onChange();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [props.term]);\n  useEffect(() => {\n    onChange();\n  }, [onChange]);\n\n  const onChangeFilter = data => {\n    switch (data.type) {\n      case \"checkbox\":\n        if (data.data.checked === true) {\n          addActivatedFilters({\n            front: {\n              type: data.slug,\n              data: data.data.slug,\n              label: data.data.label\n            }\n          });\n        } else if (data.data.remove && data.data.remove === true) {\n          removeActivatedFilters(data.data, data.slug);\n        }\n\n        break;\n\n      case \"slider\":\n        addActivatedFilters({\n          front: {\n            type: data.slug,\n            replace: true,\n            data: `${data.data.minimum},${data.data.maximum}`\n          }\n        });\n        break;\n\n      case \"textField\":\n        addActivatedFilters({\n          front: {\n            type: data.slug,\n            replace: true,\n            data: `${data.data}`,\n            label: data.label\n          }\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  function isFilterActive(title, label) {\n    return isFiltersExist(activatedFilters === null || activatedFilters === void 0 ? void 0 : activatedFilters.front, title, label);\n  }\n\n  const renderFilters = (child, filter, index) => {\n    var _child$id;\n\n    switch (child.type) {\n      case \"checkbox\":\n        return /*#__PURE__*/_jsxDEV(CheckboxFilter, {\n          onChange: onChangeFilter,\n          label: child.label,\n          title: filter.title,\n          titleSlug: filter.slug || filter.title.toLowerCase(),\n          slug: child.slug,\n          id: child.id,\n          active: isFilterActive(filter.slug || filter.title.toLowerCase(), (_child$id = child.id) === null || _child$id === void 0 ? void 0 : _child$id.toString()),\n          activatedFilters: props.activatedFilters,\n          refresh: props.refreshFilters\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 24\n        }, this);\n\n      case \"component\":\n        return /*#__PURE__*/_jsxDEV(child.component, {\n          onChange: onChangeFilter,\n          title: filter.title,\n          value: findValueFromQuery(activatedFilters === null || activatedFilters === void 0 ? void 0 : activatedFilters.front, filter.slug || filter.title.toLowerCase()).split(\",\"),\n          valueLabel: props.isCorrectSet ? findValueFromQuery(activatedFilters === null || activatedFilters === void 0 ? void 0 : activatedFilters.chip, filter.slug || filter.title.toLowerCase()).split(\",\") : [],\n          activatedFilters: props.activatedFilters,\n          refresh: props.refreshFilters,\n          ...child.props\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 24\n        }, this);\n\n      case \"divider\":\n        return /*#__PURE__*/_jsxDEV(Divider, {}, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 24\n        }, this);\n\n      default:\n        return null;\n    }\n  };\n\n  const onSeeAllClick = index => {\n    setExpand([...expand, {\n      index,\n      state: true\n    }]);\n  };\n\n  const renderedChildrenCount = (filterIndex, filter) => {\n    let count = filter.maxChildren;\n    expand.forEach(elem => {\n      if (elem.index === filterIndex && elem.state) {\n        count = filter.children.length;\n      }\n    });\n    return count;\n  };\n\n  const correctChipIdsOnStart = filtersData => {\n    if (filtersData.length > 0 && activatedFilters && !correctChipIds) {\n      const needRequestIds = [];\n      Object.keys(activatedFilters.chip).forEach(key => {\n        const replaceFiltersArray = [];\n        filtersData.forEach(filter => {\n          if ((filter.slug || filter.title.toLowerCase()) === key) {\n            switch (key) {\n              case \"ratings\":\n                break;\n\n              default:\n                let chipValue = activatedFilters.chip[key].split(\",\");\n                chipValue.forEach(chipId => {\n                  filter.children.forEach(child => {\n                    if (child.id === parseInt(chipId)) {\n                      replaceFiltersArray.push(child.label);\n                      chipValue = chipValue.filter(item => item !== chipId);\n                    }\n                  });\n                });\n\n                if (chipValue.length > 0) {\n                  needRequestIds.push({\n                    ids: chipValue,\n                    slug: key\n                  });\n                }\n\n                activatedFilters.chip[key] = replaceFiltersArray.concat(chipValue).join(\",\");\n            }\n\n            setActivatedFilters(activatedFilters);\n            onChange();\n            setCorrectChipIds(true);\n          }\n        });\n      });\n      props.correctIds(needRequestIds);\n    }\n  };\n\n  useEffect(() => {\n    if (isFiltersLoaded) {\n      const filtersData = filters(props.genres, props.modes, props.perspectives);\n      const ids = [];\n      filtersData.forEach((filter, index) => {\n        let isCollapse = true;\n\n        if (filter.collapse === false) {\n          isCollapse = false;\n        }\n\n        if (activatedFilters && activatedFilters.front && activatedFilters.front[filter.slug || filter.title.toLowerCase()] && activatedFilters.front[filter.slug || filter.title.toLowerCase()] !== \"\") {\n          isCollapse = true;\n        }\n\n        if (isCollapse === true) {\n          ids.push(`${index}`);\n        }\n      });\n      setCollapseIds(ids);\n      setExpandIds(ids);\n      setLoadedFilters(filtersData);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [isFiltersLoaded, activatedFilters]);\n  useEffect(() => {\n    if (isFiltersLoaded) {\n      if (activatedFilters) {\n        correctChipIdsOnStart(loadedFilters);\n      } else {\n        setCorrectChipIds(true);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [isFiltersLoaded, loadedFilters, activatedFilters]);\n  useEffect(() => {\n    if (props.genres.length > 0 && props.modes.length > 0 && props.perspectives.length > 0) {\n      setIsFiltersLoaded(true);\n    }\n  }, [props.genres, props.modes, props.perspectives]); // useEffect(() => {\n  //     // setActivatedFilters(props.activatedFilters)\n  // }, [props.refresh, props.activatedFilters])\n\n  return /*#__PURE__*/_jsxDEV(FiltersContainer, {\n    children: collapseIds.length > 0 && /*#__PURE__*/_jsxDEV(LargeTreeView, {\n      defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 42\n      }, this),\n      defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronLeft, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 40\n      }, this),\n      defaultExpanded: collapseIds,\n      onNodeToggle: (evt, value) => setExpandIds(value),\n      children: loadedFilters.map((filter, filterIndex) => {\n        return /*#__PURE__*/_jsxDEV(TreeWrapper, {\n          children: [/*#__PURE__*/_jsxDEV(TreeItem, {\n            nodeId: `${filterIndex}`,\n            label: filter.title,\n            children: filter.children && filter.children.map((child, childIndex) => {\n              if (filter.maxChildren) {\n                if (childIndex < renderedChildrenCount(filterIndex, filter)) {\n                  return renderFilters(child, filter, childIndex);\n                } else {\n                  return null;\n                }\n              } else {\n                return renderFilters(child, filter, childIndex);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 33\n          }, this), filter.maxChildren && expandIds.includes(filterIndex.toString()) && !expand.find(elem => elem.index === filterIndex) && /*#__PURE__*/_jsxDEV(SeeAllContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SeeAllButton, {\n              onClick: () => onSeeAllClick(filterIndex),\n              children: \"See all\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(DoubleArrowIcon, {\n              className: \"icon-double-arrow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 37\n          }, this)]\n        }, filterIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 9\n  }, this);\n}\n\n_s(HandleFilters, \"XY2T5sHQRqnO5lX1RGzCK5ZPGRA=\");\n\n_c8 = HandleFilters;\nHandleFilters.propTypes = {\n  queryFilters: PropTypes.object,\n  onChange: PropTypes.func,\n  term: PropTypes.string,\n  refresh: PropTypes.number\n};\nconst actionCreators = {\n  correctIds\n};\n\nfunction mapStateToProps(state) {\n  return {\n    genres: state.filtersReducer.genres,\n    modes: state.filtersReducer.modes,\n    perspectives: state.filtersReducer.perspectives,\n    isCorrectSet: state.uiReducer.isCorrectIds,\n    activatedFilters: state.uiReducer.activatedFilters,\n    refreshFilters: state.uiReducer.refreshFilters\n  };\n}\n\nexport default compose(withRouter, connect(mapStateToProps, actionCreators))(HandleFilters);\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"FiltersContainer\");\n$RefreshReg$(_c2, \"Divider\");\n$RefreshReg$(_c3, \"LargeTreeView\");\n$RefreshReg$(_c4, \"SeeAllButton\");\n$RefreshReg$(_c5, \"TreeWrapper\");\n$RefreshReg$(_c6, \"SeeAllContainer\");\n$RefreshReg$(_c7, \"DoubleArrowIcon\");\n$RefreshReg$(_c8, \"HandleFilters\");","map":{"version":3,"sources":["/Users/bdeguigne/Documents/Game Bringer/src/components/Advanced Search/HandleFilters.js"],"names":["React","useState","useEffect","useCallback","PropTypes","styled","filters","addAndGroupElem","isFiltersExist","replaceTerm","findValueFromQuery","removeTerm","CheckboxFilter","connect","appColors","compose","withRouter","TreeItem","TreeView","ExpandMore","ChevronLeft","correctIds","FiltersContainer","div","Divider","hr","LargeTreeView","SeeAllButton","primarySimple","TreeWrapper","SeeAllContainer","DoubleArrowIcon","span","HandleFilters","props","expand","setExpand","activatedFilters","setActivatedFilters","loadedFilters","setLoadedFilters","collapseIds","setCollapseIds","expandIds","setExpandIds","correctChipIds","setCorrectChipIds","isFiltersLoaded","setIsFiltersLoaded","addActivatedFilters","data","replace","filter","front","res","type","label","onChange","removeActivatedFilters","toRemoved","titleSlug","slug","queryFilters","Object","keys","length","chip","JSON","parse","stringify","term","onChangeFilter","checked","remove","minimum","maximum","isFilterActive","title","renderFilters","child","index","toLowerCase","id","toString","refreshFilters","split","isCorrectSet","onSeeAllClick","state","renderedChildrenCount","filterIndex","count","maxChildren","forEach","elem","children","correctChipIdsOnStart","filtersData","needRequestIds","key","replaceFiltersArray","chipValue","chipId","parseInt","push","item","ids","concat","join","genres","modes","perspectives","isCollapse","collapse","evt","value","map","childIndex","includes","find","propTypes","object","func","string","refresh","number","actionCreators","mapStateToProps","filtersReducer","uiReducer","isCorrectIds"],"mappings":"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","sourcesContent":["\n\nimport React, { useState, useEffect, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from \"styled-components\";\n// import Collapsable from './Collapsable';\nimport { filters, addAndGroupElem, isFiltersExist, replaceTerm, findValueFromQuery, removeTerm } from './filters';\nimport CheckboxFilter from './CheckboxFilter';\nimport { connect } from 'react-redux';\nimport { appColors } from \"../../utils/styles\";\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { ExpandMore, ChevronLeft } from '@material-ui/icons';\nimport { correctIds } from '../../redux/actions/filtersActions'\n\nconst FiltersContainer = styled.div`\n    width: 238px;\n    margin-left: 16px;\n`\n\nconst Divider = styled.hr`\n    margin: 8px auto;\n    width: 80%;\n    border: 1px solid ${appColors[700]};\n    opacity: 0.6;\n    border-radius: 5px;\n`\n\nconst LargeTreeView = styled(TreeView)`\n    width: 238px;\n`\n\nconst SeeAllButton = styled.div`\n    cursor: pointer;\n    text-transform: uppercase;\n    color: ${appColors.primarySimple};\n`\n\nconst TreeWrapper = styled.div`\n     margin-bottom: 16px;\n`\n\nconst SeeAllContainer = styled.div`\n    margin-top: 4px;\n    width: 100%;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    user-select: none;\n    font-size: 12px;\n`\n\nconst DoubleArrowIcon = styled.span`\n    font-size: 14px !important;\n    margin-left: 4px;\n    transform: rotate(-90deg);\n    color: ${appColors.primarySimple};\n`\n\nfunction HandleFilters(props) {\n    const [expand, setExpand] = useState([]);\n    const [activatedFilters, setActivatedFilters] = useState(null);\n    const [loadedFilters, setLoadedFilters] = useState([]);\n    const [collapseIds, setCollapseIds] = useState([]);\n    const [expandIds, setExpandIds] = useState([]);\n    const [correctChipIds, setCorrectChipIds] = useState(false);\n    const [isFiltersLoaded, setIsFiltersLoaded] = useState(false);\n\n    const addActivatedFilters = (data) => {\n        let replace = false;\n\n        const filter = data.front;\n\n        if (filter.replace) {\n            replace = filter.replace\n        }\n\n        const res = addAndGroupElem(activatedFilters, filter.type, filter.data, filter.label, replace);\n\n        setActivatedFilters(res);\n        onChange()\n    }\n\n    const removeActivatedFilters = (toRemoved, titleSlug) => {\n        setActivatedFilters(removeTerm(toRemoved.slug, toRemoved.label, titleSlug, activatedFilters))\n        onChange();\n    }\n\n    const onChange = useCallback(\n        () => {\n            if (props.onChange && activatedFilters) {\n                props.onChange(activatedFilters);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [activatedFilters],\n    )\n\n    useEffect(() => {\n        if (props.queryFilters && Object.keys(props.queryFilters).length !== 0 && !activatedFilters) {\n            setActivatedFilters(\n                { front: props.queryFilters, chip: JSON.parse(JSON.stringify(props.queryFilters)) },\n            );\n        } \n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.queryFilters])\n\n    useEffect(() => {\n        if (props.term !== \"\") {\n            setActivatedFilters(replaceTerm(activatedFilters, props.term))\n            onChange();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.term])\n\n    useEffect(() => {\n        onChange()\n    }, [onChange])\n\n    const onChangeFilter = (data) => {\n        switch (data.type) {\n            case \"checkbox\":\n                if (data.data.checked === true) {\n                    addActivatedFilters({\n                        front: {\n                            type: data.slug,\n                            data: data.data.slug,\n                            label: data.data.label\n                        }\n                    })\n                } else if (data.data.remove && data.data.remove === true) {\n                    removeActivatedFilters(data.data, data.slug)\n                }\n                break;\n            case \"slider\":\n                addActivatedFilters({\n                    front: {\n                        type: data.slug,\n                        replace: true,\n                        data: `${data.data.minimum},${data.data.maximum}`\n                    }\n                })\n                break;\n            case \"textField\":\n                addActivatedFilters({\n                    front: {\n                        type: data.slug,\n                        replace: true,\n                        data: `${data.data}`,\n                        label: data.label\n                    }\n                })\n                break;\n            default:\n                break;\n        }\n    }\n\n    function isFilterActive(title, label) {\n        return isFiltersExist(activatedFilters?.front, title, label)\n    }\n\n    const renderFilters = (child, filter, index) => {\n        switch (child.type) {\n            case \"checkbox\":\n                return <CheckboxFilter key={index} onChange={onChangeFilter} label={child.label} title={filter.title} titleSlug={filter.slug || filter.title.toLowerCase()} slug={child.slug} id={child.id} active={isFilterActive(filter.slug || filter.title.toLowerCase(), child.id?.toString())} activatedFilters={props.activatedFilters} refresh={props.refreshFilters}/>\n            case \"component\":\n                return <child.component key={index} onChange={onChangeFilter} title={filter.title} value={findValueFromQuery(activatedFilters?.front, filter.slug || filter.title.toLowerCase()).split(\",\")} valueLabel={props.isCorrectSet ? findValueFromQuery(activatedFilters?.chip, filter.slug || filter.title.toLowerCase()).split(\",\") : []} activatedFilters={props.activatedFilters} refresh={props.refreshFilters} {...child.props} />\n            case \"divider\":\n                return <Divider key={index} />\n            default:\n                return null;\n        }\n    }\n\n    const onSeeAllClick = (index) => {\n        setExpand([...expand, {\n            index,\n            state: true\n        }])\n    }\n\n    const renderedChildrenCount = (filterIndex, filter) => {\n        let count = filter.maxChildren;\n\n        expand.forEach(elem => {\n            if (elem.index === filterIndex && elem.state) {\n                count = filter.children.length;\n            }\n        })\n        return count;\n    }\n\n    const correctChipIdsOnStart = (filtersData) => {\n        if (filtersData.length > 0 && activatedFilters && !correctChipIds) {\n            const needRequestIds = [];\n\n            Object.keys(activatedFilters.chip).forEach(key => {\n                const replaceFiltersArray = [];\n\n                filtersData.forEach(filter => {\n                    if ((filter.slug || filter.title.toLowerCase()) === key) {\n                        switch (key) {\n                            case \"ratings\":\n                                break;\n                            default:\n                                let chipValue = activatedFilters.chip[key].split(\",\");\n\n                                chipValue.forEach(chipId => {\n                                    filter.children.forEach(child => {\n                                        if (child.id === parseInt(chipId)) {\n                                            replaceFiltersArray.push(child.label)\n                                            chipValue = chipValue.filter(item => item !== chipId)\n                                        }\n                                    })\n                                })\n                                if (chipValue.length > 0) {\n                                    needRequestIds.push({ ids: chipValue, slug: key })\n                                }\n\n                                activatedFilters.chip[key] = replaceFiltersArray.concat(chipValue).join(\",\")\n\n                        }\n                        setActivatedFilters(activatedFilters);\n                        onChange()\n                        setCorrectChipIds(true);\n                    }\n                })\n            })\n            props.correctIds(needRequestIds);\n        }\n    }\n\n    useEffect(() => {\n        if (isFiltersLoaded) {\n            const filtersData = filters(props.genres, props.modes, props.perspectives);\n            const ids = [];\n\n\n            filtersData.forEach((filter, index) => {\n                let isCollapse = true;\n\n                if (filter.collapse === false) {\n                    isCollapse = false\n                }\n                if (activatedFilters && activatedFilters.front && activatedFilters.front[filter.slug || filter.title.toLowerCase()] && activatedFilters.front[filter.slug || filter.title.toLowerCase()] !== \"\") {\n                    isCollapse = true;\n                }\n                if (isCollapse === true) {\n                    ids.push(`${index}`);\n                }\n            })\n\n            setCollapseIds(ids);\n            setExpandIds(ids);\n            setLoadedFilters(filtersData);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isFiltersLoaded, activatedFilters])\n\n    useEffect(() => {\n        if (isFiltersLoaded) {\n            if (activatedFilters) {\n                correctChipIdsOnStart(loadedFilters);\n            } else {\n                setCorrectChipIds(true)\n            }\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isFiltersLoaded, loadedFilters, activatedFilters])\n\n    useEffect(() => {\n        if (props.genres.length > 0 && props.modes.length > 0 && props.perspectives.length > 0) {\n            setIsFiltersLoaded(true)\n        }\n    }, [props.genres, props.modes, props.perspectives])\n\n    // useEffect(() => {\n    //     // setActivatedFilters(props.activatedFilters)\n    // }, [props.refresh, props.activatedFilters])\n\n    return (\n        <FiltersContainer>\n            {collapseIds.length > 0 && (\n                <LargeTreeView\n                    defaultCollapseIcon={<ExpandMore />}\n                    defaultExpandIcon={<ChevronLeft />}\n                    defaultExpanded={collapseIds}\n                    onNodeToggle={(evt, value) => setExpandIds(value)}\n                >\n                    {loadedFilters.map((filter, filterIndex) => {\n                        return (\n                            <TreeWrapper key={filterIndex}>\n                                <TreeItem nodeId={`${filterIndex}`} label={filter.title}>\n                                    {filter.children && filter.children.map((child, childIndex) => {\n                                        if (filter.maxChildren) {\n                                            if (childIndex < renderedChildrenCount(filterIndex, filter)) {\n                                                return renderFilters(child, filter, childIndex)\n                                            } else {\n                                                return null;\n                                            }\n                                        } else {\n                                            return renderFilters(child, filter, childIndex)\n                                        }\n\n                                    })}\n                                </TreeItem>\n                                {filter.maxChildren && expandIds.includes(filterIndex.toString()) && !expand.find(elem => elem.index === filterIndex) && (\n                                    <SeeAllContainer>\n                                        <SeeAllButton onClick={() => onSeeAllClick(filterIndex)}>See all</SeeAllButton>\n                                        <DoubleArrowIcon className=\"icon-double-arrow\" />\n                                    </SeeAllContainer>\n                                )}\n\n                            </TreeWrapper>\n                        )\n                    })}\n                </LargeTreeView>\n            )}\n        </FiltersContainer >\n    )\n}\n\nHandleFilters.propTypes = {\n    queryFilters: PropTypes.object,\n    onChange: PropTypes.func,\n    term: PropTypes.string,\n    refresh: PropTypes.number\n}\n\nconst actionCreators = {\n    correctIds\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.filtersReducer.genres,\n        modes: state.filtersReducer.modes,\n        perspectives: state.filtersReducer.perspectives,\n        isCorrectSet: state.uiReducer.isCorrectIds,\n        activatedFilters: state.uiReducer.activatedFilters,\n        refreshFilters: state.uiReducer.refreshFilters\n    };\n}\n\nexport default compose(\n    withRouter,\n    connect(mapStateToProps, actionCreators)\n)(HandleFilters);\n"]},"metadata":{},"sourceType":"module"}