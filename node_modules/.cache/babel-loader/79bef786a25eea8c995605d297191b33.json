{"ast":null,"code":"import TextFieldFilter from \"./TextFieldFilter\";\nimport SliderFilter from \"./SliderFilter\";\nimport moment from 'moment';\n\nconst getYears = () => {\n  const years = [];\n  const dateStart = moment().add(2, 'y');\n  const dateEnd = moment({\n    year: 1973\n  });\n\n  while (dateEnd.diff(dateStart, 'years') <= 0) {\n    years.push(dateStart.format('YYYY'));\n    years.push({\n      type: \"checkbox\",\n      label: dateStart.format('YYYY'),\n      slug: dateStart.format('YYYY'),\n      id: parseInt(dateStart.format('YYYY'))\n    });\n    dateStart.add(-1, 'year');\n  }\n\n  return years;\n}; // const getMonths = () => {\n//     const months = []\n//     const dateStart = moment()\n//     const dateEnd = moment().add(12, \"month\")\n//     let i = 0;\n//     while (dateEnd.diff(dateStart, \"months\") > 0) {\n//         months.push({\n//             type: \"checkbox\",\n//             label: dateStart.format(\"MMMM\"),\n//             slug: dateStart.format(\"MMMM\").toLowerCase(),\n//             id: i\n//         })\n//         i += 1;\n//         dateStart.add(1, \"month\");\n//     }\n//     return months\n// }\n\n\nexport function filters(genres, modes, perspectives) {\n  const renderedGenres = [];\n  const renderedModes = [];\n  const renderedPerspectives = [];\n\n  if (genres.length === 0) {\n    return [];\n  }\n\n  genres.forEach(genre => {\n    renderedGenres.push({\n      type: \"checkbox\",\n      label: genre.name,\n      slug: genre.slug,\n      id: genre.id\n    });\n  });\n  modes.forEach(mode => {\n    renderedModes.push({\n      type: \"checkbox\",\n      label: mode.name,\n      slug: mode.slug,\n      id: mode.id\n    });\n  });\n  perspectives.forEach(perspective => {\n    renderedPerspectives.push({\n      type: \"checkbox\",\n      label: perspective.name,\n      slug: perspective.slug,\n      id: perspective.id\n    });\n  });\n  return [{\n    title: \"Ratings\",\n    slug: \"rating\",\n    children: [{\n      type: \"component\",\n      component: SliderFilter,\n      props: {\n        slug: \"rating\"\n      }\n    }]\n  }, {\n    title: \"Platform\",\n    slug: \"platforms\",\n    collapse: false,\n    children: [{\n      type: \"checkbox\",\n      label: \"PC (Microsoft Windows)\",\n      slug: \"win\",\n      id: 6\n    }, {\n      type: \"checkbox\",\n      label: \"Nintendo Switch\",\n      slug: \"switch\",\n      id: 130\n    }, {\n      type: \"checkbox\",\n      label: \"Playstation 5\",\n      slug: \"ps5\",\n      id: 167\n    }, {\n      type: \"checkbox\",\n      label: \"Playstation 4\",\n      slug: \"ps4\",\n      id: 48\n    }, {\n      type: \"checkbox\",\n      label: \"Xbox Series\",\n      slug: \"series-x\",\n      id: 169\n    }, {\n      type: \"checkbox\",\n      label: \"Xbox One\",\n      slug: \"xboxone\",\n      id: 49\n    }, {\n      type: \"divider\"\n    }, {\n      type: \"component\",\n      component: TextFieldFilter,\n      props: {\n        label: \"Other platforms\",\n        placeholder: \"Select platforms\",\n        slug: \"platforms\",\n        exclude: [\"6\", \"130\", \"167\", \"48\", \"169\", \"49\"],\n        excludeLabel: [\"PC (Microsoft Windows)\", \"Nintendo Switch\", \"Playstation 5\", \"Playstation 4\", \"Xbox Series\", \"Xbox One\"],\n        endpoint: \"/platforms\"\n      }\n    }]\n  }, {\n    title: \"Genres\",\n    maxChildren: 5,\n    children: renderedGenres\n  }, {\n    title: \"Modes\",\n    slug: \"game_modes\",\n    collapse: false,\n    children: renderedModes\n  }, {\n    title: \"Years\",\n    slug: \"year\",\n    collapse: false,\n    maxChildren: 12,\n    children: getYears()\n  }, {\n    title: \"Perspectives\",\n    slug: \"player_perspectives\",\n    collapse: false,\n    children: renderedPerspectives\n  }, {\n    title: \"Companies\",\n    collapse: false,\n    children: [{\n      type: \"component\",\n      component: TextFieldFilter,\n      props: {\n        label: \"Companies\",\n        placeholder: \"Select companies\",\n        slug: \"companies\",\n        endpoint: \"/companies\"\n      }\n    }]\n  }, {\n    title: \"Game engine\",\n    slug: \"game_engines\",\n    collapse: false,\n    children: [{\n      type: \"component\",\n      component: TextFieldFilter,\n      props: {\n        label: \"Game engine\",\n        placeholder: \"Select game engines\",\n        slug: \"game_engines\",\n        endpoint: \"/game_engines\"\n      }\n    }]\n  }];\n} // Utils function\n\nexport function getFiltersWithQuery(query) {\n  let result = {};\n\n  for (const [key, value] of query) {\n    result[key] = value;\n  }\n\n  return result;\n}\nexport const findValueFromQuery = (queryArray, findValue) => {\n  let term = \"\";\n\n  if (queryArray) {\n    Object.entries(queryArray).forEach(([key, value]) => {\n      if (key === findValue) {\n        term = value;\n      }\n    });\n  }\n\n  return term;\n};\nexport const addAndGroupElem = (toAdd, type, data, label, replace) => {\n  let isNew = true;\n  console.log(\"TOO ADD\", toAdd);\n\n  if (toAdd !== null) {\n    Object.entries(toAdd.front).forEach(([key, value]) => {\n      if (key === type) {\n        if (replace === true) {\n          toAdd.front[type] = data;\n          toAdd.chip[type] = label || data;\n        } else {\n          let separator = \",\";\n\n          if (!toAdd || toAdd.front[type] === \"\") {\n            separator = \"\";\n          } // toAdd[type] = toAdd[type] + separator + data;\n\n\n          toAdd.front[type] = toAdd.front[type] + separator + data;\n          toAdd.chip[type] = toAdd.chip[type] + separator + label;\n        }\n\n        isNew = false;\n      }\n    });\n\n    if (isNew === true) {\n      toAdd.front[type] = data;\n      toAdd.chip[type] = label || data; // add.front[type] = data;\n    }\n  } else {\n    toAdd = {\n      front: {\n        [type]: data\n      },\n      chip: {\n        [type]: label || data\n      }\n    }; // toAdd = { [type]: data };\n  }\n\n  if (toAdd.front[type] === \"\") delete toAdd.front[type];\n  if (toAdd.chip[type] === \"\") delete toAdd.chip[type];\n  return toAdd;\n};\nexport const generateParams = filtersArray => {\n  // console.log(\"GENERATE PARAMS\", filtersArray);\n  let params = new URLSearchParams(filtersArray).toString();\n  return params;\n};\nexport const isFiltersExist = (toCheck, type, data) => {\n  let isExist = false;\n\n  if (toCheck) {\n    Object.entries(toCheck).forEach(([key, value]) => {\n      if (key === type) {\n        let filters = value.split(\",\");\n        filters.forEach(filter => {\n          if (filter === data) {\n            isExist = true;\n          }\n        });\n      }\n    });\n  } // console.log(\"IS FILTER EXISTS\", toCheck)\n\n\n  return isExist;\n};\nexport const replaceTerm = (toReplace, replaceValue) => {\n  var _toReplace;\n\n  let hasTerm = false;\n  console.log(\"REPLACE\", toReplace, replaceValue);\n\n  if ((_toReplace = toReplace) === null || _toReplace === void 0 ? void 0 : _toReplace.front) {\n    Object.entries(toReplace.front).forEach(([key, value]) => {\n      if (key === \"term\") {\n        hasTerm = true;\n        toReplace.front[\"term\"] = replaceValue;\n        toReplace.chip[\"term\"] = replaceValue;\n      }\n    });\n\n    if (hasTerm === false) {\n      toReplace.front[\"term\"] = replaceValue;\n      toReplace.chip[\"term\"] = replaceValue;\n      return toReplace; // toReplace =  {\"term\" : replaceValue};\n    }\n  }\n\n  if (hasTerm === false) {\n    toReplace = {\n      front: {\n        \"term\": replaceValue\n      },\n      chip: {\n        \"term\": replaceValue\n      }\n    };\n  }\n\n  console.log(\"TOO REPLACE\", toReplace);\n  return toReplace;\n};\nexport const replace = (toReplace, replaceKey, replaceValue) => {\n  let hasTerm = false;\n  console.log(\"REPLACE\", toReplace, replaceValue);\n  console.log(\"REPLACE KEY\", replaceKey);\n\n  if (toReplace) {\n    Object.entries(toReplace).forEach(([key, value]) => {\n      if (key === \"term\") {\n        hasTerm = true;\n        toReplace[replaceKey] = replaceValue;\n      }\n    });\n\n    if (hasTerm === false) {\n      toReplace[replaceKey] = replaceValue;\n      return toReplace;\n    }\n  }\n\n  if (hasTerm === false) {\n    toReplace = {\n      replaceKey: replaceValue\n    };\n  }\n\n  console.log(\"REPLACE RESULT\", toReplace);\n  return toReplace;\n};\nexport const removeTerm = (toRemoveId, toRemoveLabel, title, filters) => {\n  console.log(\"REMOVE\", toRemoveId, toRemoveLabel);\n  console.log(\"TITLE\", title);\n  console.log(\"FILTERS\", filters);\n\n  if (toRemoveId && filters) {\n    let splitFiltersFront = filters.front[title].split(\",\");\n    let splitFiltersChip = filters.chip[title].split(\",\");\n    splitFiltersFront = splitFiltersFront.filter(item => {\n      return item !== toRemoveId;\n    });\n    splitFiltersChip = splitFiltersChip.filter(item => {\n      return item !== toRemoveLabel;\n    });\n    filters.front[title] = splitFiltersFront.join(\",\");\n    filters.chip[title] = splitFiltersChip.join(\",\");\n    if (filters.front[title] === \"\") delete filters.front[title];\n    if (filters.chip[title] === \"\") delete filters.chip[title];\n    return filters;\n  }\n};","map":{"version":3,"sources":["/Users/bdeguigne/Documents/Game Bringer/src/components/Advanced Search/filters.js"],"names":["TextFieldFilter","SliderFilter","moment","getYears","years","dateStart","add","dateEnd","year","diff","push","format","type","label","slug","id","parseInt","filters","genres","modes","perspectives","renderedGenres","renderedModes","renderedPerspectives","length","forEach","genre","name","mode","perspective","title","children","component","props","collapse","placeholder","exclude","excludeLabel","endpoint","maxChildren","getFiltersWithQuery","query","result","key","value","findValueFromQuery","queryArray","findValue","term","Object","entries","addAndGroupElem","toAdd","data","replace","isNew","console","log","front","chip","separator","generateParams","filtersArray","params","URLSearchParams","toString","isFiltersExist","toCheck","isExist","split","filter","replaceTerm","toReplace","replaceValue","hasTerm","replaceKey","removeTerm","toRemoveId","toRemoveLabel","splitFiltersFront","splitFiltersChip","item","join"],"mappings":"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","sourcesContent":["import TextFieldFilter from \"./TextFieldFilter\";\nimport SliderFilter from \"./SliderFilter\";\nimport moment from 'moment'\n\nconst getYears = () => {\n    const years = []\n    const dateStart = moment().add(2, 'y');\n    const dateEnd = moment({ year: 1973 });\n\n    while (dateEnd.diff(dateStart, 'years') <= 0) {\n        years.push(dateStart.format('YYYY'))\n        years.push({\n            type: \"checkbox\",\n            label: dateStart.format('YYYY'),\n            slug: dateStart.format('YYYY'),\n            id: parseInt(dateStart.format('YYYY'))\n        })\n        dateStart.add(-1, 'year')\n    }\n    return years\n}\n\n// const getMonths = () => {\n//     const months = []\n//     const dateStart = moment()\n//     const dateEnd = moment().add(12, \"month\")\n//     let i = 0;\n//     while (dateEnd.diff(dateStart, \"months\") > 0) {\n//         months.push({\n//             type: \"checkbox\",\n//             label: dateStart.format(\"MMMM\"),\n//             slug: dateStart.format(\"MMMM\").toLowerCase(),\n//             id: i\n//         })\n//         i += 1;\n//         dateStart.add(1, \"month\");\n//     }\n//     return months\n// }\n\nexport function filters(genres, modes, perspectives) {\n    const renderedGenres = [];\n    const renderedModes = [];\n    const renderedPerspectives = [];\n\n    if (genres.length === 0) {\n        return [];\n    }\n\n    genres.forEach(genre => {\n        renderedGenres.push({\n            type: \"checkbox\",\n            label: genre.name,\n            slug: genre.slug,\n            id: genre.id\n        })\n    });\n    modes.forEach(mode => {\n        renderedModes.push({\n            type: \"checkbox\",\n            label: mode.name,\n            slug: mode.slug,\n            id: mode.id\n        })\n    });\n\n    perspectives.forEach(perspective => {\n        renderedPerspectives.push({\n            type: \"checkbox\",\n            label: perspective.name,\n            slug: perspective.slug,\n            id: perspective.id\n        })\n    });\n\n    return [\n        {\n            title: \"Ratings\",\n            slug: \"rating\",\n            children: [\n                {\n                    type: \"component\",\n                    component: SliderFilter,\n                    props: {\n                        slug: \"rating\"\n                    }\n                },\n            ],\n        },\n        {\n            title: \"Platform\",\n            slug: \"platforms\",\n            collapse: false,\n            children: [\n                {\n                    type: \"checkbox\",\n                    label: \"PC (Microsoft Windows)\",\n                    slug: \"win\",\n                    id: 6,\n                },\n                {\n                    type: \"checkbox\",\n                    label: \"Nintendo Switch\",\n                    slug: \"switch\",\n                    id: 130\n                },\n                {\n                    type: \"checkbox\",\n                    label: \"Playstation 5\",\n                    slug: \"ps5\",\n                    id: 167\n                },\n                {\n                    type: \"checkbox\",\n                    label: \"Playstation 4\",\n                    slug: \"ps4\",\n                    id: 48\n                },\n                {\n                    type: \"checkbox\",\n                    label: \"Xbox Series\",\n                    slug: \"series-x\",\n                    id: 169\n                },\n                {\n                    type: \"checkbox\",\n                    label: \"Xbox One\",\n                    slug: \"xboxone\",\n                    id: 49\n                },\n                {\n                    type: \"divider\"\n                },\n                {\n                    type: \"component\",\n                    component: TextFieldFilter,\n                    props: {\n                        label: \"Other platforms\",\n                        placeholder: \"Select platforms\",\n                        slug: \"platforms\",\n                        exclude: [\"6\", \"130\", \"167\", \"48\", \"169\", \"49\"],\n                        excludeLabel: [\"PC (Microsoft Windows)\", \"Nintendo Switch\", \"Playstation 5\", \"Playstation 4\", \"Xbox Series\", \"Xbox One\"],\n                        endpoint: \"/platforms\"\n                    }\n                }\n            ]\n        },\n        {\n            title: \"Genres\",\n            maxChildren: 5,\n            children: renderedGenres\n        },\n        {\n            title: \"Modes\",\n            slug: \"game_modes\",\n            collapse: false,\n            children: renderedModes\n        },\n        {\n            title: \"Years\",\n            slug: \"year\",\n            collapse: false,\n            maxChildren: 12,\n            children: getYears()\n        },\n        {\n            title: \"Perspectives\",\n            slug: \"player_perspectives\",\n            collapse: false,\n            children: renderedPerspectives\n        },\n        {\n            title: \"Companies\",\n            collapse: false,\n            children: [\n                {\n                    type: \"component\",\n                    component: TextFieldFilter,\n                    props: { label: \"Companies\", placeholder: \"Select companies\", slug: \"companies\", endpoint: \"/companies\" }\n                }\n            ]\n        },\n        {\n            title: \"Game engine\",\n            slug: \"game_engines\",\n            collapse: false,\n            children: [\n                {\n                    type: \"component\",\n                    component: TextFieldFilter,\n                    props: { label: \"Game engine\", placeholder: \"Select game engines\", slug: \"game_engines\", endpoint: \"/game_engines\" }\n                }\n            ]\n        },\n    ]\n}\n\n// Utils function\n\nexport function getFiltersWithQuery(query) {\n    let result = {};\n\n    for (const [key, value] of query) {\n        result[key] = value;\n    }\n    return result;\n}\n\nexport const findValueFromQuery = (queryArray, findValue) => {\n    let term = \"\";\n\n\n    if (queryArray) {\n        Object.entries(queryArray).forEach(\n            ([key, value]) => {\n                if (key === findValue) {\n                    term = value;\n                }\n            })\n    }\n    return term;\n}\n\nexport const addAndGroupElem = (toAdd, type, data, label, replace) => {\n    let isNew = true;\n\n    console.log(\"TOO ADD\", toAdd);\n    if (toAdd !== null) {\n        Object.entries(toAdd.front).forEach(\n            ([key, value]) => {\n                if (key === type) {\n\n\n\n                    if (replace === true) {\n                        toAdd.front[type] = data\n                        toAdd.chip[type] = label || data\n                    } else {\n                        let separator = \",\";\n\n                        if (!toAdd || toAdd.front[type] === \"\") {\n                            separator = \"\";\n                        }\n                        // toAdd[type] = toAdd[type] + separator + data;\n                        toAdd.front[type] = toAdd.front[type] + separator + data;\n                        toAdd.chip[type] = toAdd.chip[type] + separator + label;\n\n                    }\n                    isNew = false;\n                }\n            })\n\n        if (isNew === true) {\n            toAdd.front[type] = data;\n            toAdd.chip[type] = label || data;\n            // add.front[type] = data;\n        }\n    } else {\n        toAdd = {\n            front: { [type]: data },\n            chip: { [type]: label || data }\n        }\n        // toAdd = { [type]: data };\n    }\n\n    if (toAdd.front[type] === \"\")\n        delete toAdd.front[type];\n    if (toAdd.chip[type] === \"\")\n        delete toAdd.chip[type];\n    return toAdd;\n}\n\nexport const generateParams = (filtersArray) => {\n    // console.log(\"GENERATE PARAMS\", filtersArray);\n    let params = new URLSearchParams(filtersArray).toString();\n\n    return params;\n}\n\nexport const isFiltersExist = (toCheck, type, data) => {\n    let isExist = false;\n\n\n    if (toCheck) {\n        Object.entries(toCheck).forEach(\n            ([key, value]) => {\n                if (key === type) {\n                    let filters = value.split(\",\");\n                    filters.forEach(filter => {\n                        if (filter === data) {\n                            isExist = true;\n                        }\n                    })\n                }\n            })\n    }\n    // console.log(\"IS FILTER EXISTS\", toCheck)\n    return isExist;\n}\n\nexport const replaceTerm = (toReplace, replaceValue) => {\n    let hasTerm = false;\n\n    console.log(\"REPLACE\", toReplace, replaceValue)\n\n    if (toReplace?.front) {\n        Object.entries(toReplace.front).forEach(\n            ([key, value]) => {\n                if (key === \"term\") {\n                    hasTerm = true;\n                    toReplace.front[\"term\"] = replaceValue;\n                    toReplace.chip[\"term\"] = replaceValue;\n                }\n            })\n        if (hasTerm === false) {\n            toReplace.front[\"term\"] = replaceValue;\n            toReplace.chip[\"term\"] = replaceValue;\n\n            return toReplace;\n            // toReplace =  {\"term\" : replaceValue};\n        }\n    }\n\n    if (hasTerm === false) {\n        toReplace = {\n            front: { \"term\": replaceValue },\n            chip: { \"term\": replaceValue }\n        };\n    }\n\n    console.log(\"TOO REPLACE\", toReplace)\n\n    return toReplace;\n}\n\nexport const replace = (toReplace, replaceKey, replaceValue) => {\n    let hasTerm = false;\n\n    console.log(\"REPLACE\", toReplace, replaceValue)\n    console.log(\"REPLACE KEY\", replaceKey)\n\n    if (toReplace) {\n        Object.entries(toReplace).forEach(\n            ([key, value]) => {\n                if (key === \"term\") {\n                    hasTerm = true;\n                    toReplace[replaceKey] = replaceValue;\n                }\n            })\n        if (hasTerm === false) {\n            toReplace[replaceKey] = replaceValue;\n\n            return toReplace;\n        }\n    }\n\n    if (hasTerm === false) {\n        toReplace = { replaceKey: replaceValue }\n    }\n\n    console.log(\"REPLACE RESULT\", toReplace);\n\n    return toReplace;\n}\n\nexport const removeTerm = (toRemoveId, toRemoveLabel, title, filters) => {\n    console.log(\"REMOVE\", toRemoveId, toRemoveLabel)\n    console.log(\"TITLE\", title)\n    console.log(\"FILTERS\", filters)\n    if (toRemoveId && filters) {\n        let splitFiltersFront = filters.front[title].split(\",\");\n        let splitFiltersChip = filters.chip[title].split(\",\");\n\n        splitFiltersFront = splitFiltersFront.filter(item => {\n            return item !== toRemoveId\n        })\n\n        splitFiltersChip = splitFiltersChip.filter(item => {\n            return item !== toRemoveLabel\n        })\n\n        filters.front[title] = splitFiltersFront.join(\",\")\n\n        filters.chip[title] = splitFiltersChip.join(\",\")\n\n        if (filters.front[title] === \"\")\n            delete filters.front[title];\n        if (filters.chip[title] === \"\")\n            delete filters.chip[title];\n\n        return filters;\n    }\n\n}"]},"metadata":{},"sourceType":"module"}