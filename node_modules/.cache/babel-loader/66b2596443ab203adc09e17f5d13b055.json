{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bdeguigne/Downloads/backup onedrive de mort/Game Bringer/src/components/Advanced Search/SliderFilter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Slider, TextField } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { advancedSearchPadding } from '../../utils/styles';\nconst Container = styled.div`\npadding: ${advancedSearchPadding};\n`;\n_c = Container;\nconst SliderContainer = styled.div`\n    padding-left: 6px;\n    padding-right: 6px;\n`;\n_c2 = SliderContainer;\nconst TextFieldsContainer = styled.div`\n    display: flex;\n    width: 100%;\n    margin-top: 4px;\n`;\n_c3 = TextFieldsContainer;\nconst TextFieldWithMargin = styled(TextField)`\n    margin-right: ${props => props.marginright} !important;\n`;\n_c4 = TextFieldWithMargin;\n\nfunction SliderFilter(props) {\n  _s();\n\n  const [inputValue, setInputValue] = useState([0, 100]);\n  const [sliderValue, setSliderValue] = useState([0, 100]);\n  const [isFocusTextFields, setIsFocusTextFields] = useState(false);\n  const [isDefaultSet, setIsDefaultSet] = useState(false);\n\n  const handleSliderChange = (event, newValue) => {\n    setSliderValue(newValue);\n    setInputValue(newValue);\n  };\n\n  useEffect(() => {\n    if (!isNaN(inputValue[0]) && !isNaN(inputValue[1]) && inputValue[0] !== \"\" && inputValue[1] !== \"\") {\n      if (inputValue[0] >= 0 && inputValue[0] <= 100 && inputValue[1] >= 0 && inputValue[1] <= 100) {\n        setSliderValue(inputValue);\n\n        if (isFocusTextFields) {\n          sendSliderValue(inputValue);\n        }\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [inputValue]);\n  useEffect(() => {\n    if (props.value && props.value[0] !== \"\" && isDefaultSet === false) {\n      let min = parseInt(props.value[0]);\n      let max = parseInt(props.value[1]);\n      setSliderValue([min, max]);\n      setInputValue([min, max]);\n      setIsDefaultSet(true);\n    }\n  }, [props.value, isDefaultSet]);\n\n  const onChange = (type, evt) => {\n    let items = [...inputValue];\n    let minValue = items[0];\n    let maxValue = items[1];\n    let newValue = parseInt(evt.target.value);\n\n    if (isNaN(newValue)) {\n      newValue = \"\";\n    }\n\n    if (type === \"min\") {\n      minValue = newValue;\n      items[0] = minValue;\n    } else {\n      maxValue = newValue;\n      items[1] = maxValue;\n    }\n\n    setInputValue(items);\n  };\n\n  const sendSliderValue = inputValue => {\n    let results = {\n      title: props.title,\n      type: \"slider\",\n      slug: props.slug,\n      replace: true,\n      data: {\n        minimum: inputValue[0],\n        maximum: inputValue[1]\n      }\n    };\n\n    if (props.onChange) {\n      props.onChange(results);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(SliderContainer, {\n      children: /*#__PURE__*/_jsxDEV(Slider, {\n        value: sliderValue,\n        onChange: handleSliderChange,\n        valueLabelDisplay: \"auto\",\n        \"aria-labelledby\": \"range-slider\",\n        onChangeCommitted: () => sendSliderValue(sliderValue)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextFieldsContainer, {\n      children: [/*#__PURE__*/_jsxDEV(TextFieldWithMargin, {\n        marginright: \"4px\",\n        variant: \"outlined\",\n        type: \"number\",\n        value: inputValue[0],\n        onChange: text => onChange(\"min\", text),\n        label: \"Minimum\",\n        onFocus: () => setIsFocusTextFields(true),\n        onBlur: () => setIsFocusTextFields(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextFieldWithMargin, {\n        marginright: \"0\",\n        variant: \"outlined\",\n        type: \"number\",\n        value: inputValue[1],\n        onChange: text => onChange(\"max\", text),\n        label: \"Maximum\",\n        onFocus: () => setIsFocusTextFields(true),\n        onBlur: () => setIsFocusTextFields(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SliderFilter, \"ZZrrTWw4CDVsYYLVLFX4HqSakpU=\");\n\n_c5 = SliderFilter;\nSliderFilter.propTypes = {\n  title: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.array,\n  slug: PropTypes.string\n};\nexport default SliderFilter;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"SliderContainer\");\n$RefreshReg$(_c3, \"TextFieldsContainer\");\n$RefreshReg$(_c4, \"TextFieldWithMargin\");\n$RefreshReg$(_c5, \"SliderFilter\");","map":{"version":3,"sources":["/Users/bdeguigne/Downloads/backup onedrive de mort/Game Bringer/src/components/Advanced Search/SliderFilter.js"],"names":["React","useState","useEffect","PropTypes","Slider","TextField","styled","advancedSearchPadding","Container","div","SliderContainer","TextFieldsContainer","TextFieldWithMargin","props","marginright","SliderFilter","inputValue","setInputValue","sliderValue","setSliderValue","isFocusTextFields","setIsFocusTextFields","isDefaultSet","setIsDefaultSet","handleSliderChange","event","newValue","isNaN","sendSliderValue","value","min","parseInt","max","onChange","type","evt","items","minValue","maxValue","target","results","title","slug","replace","data","minimum","maximum","text","propTypes","string","isRequired","func","array"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types';\nimport { Slider, TextField } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { advancedSearchPadding } from '../../utils/styles'\n\nconst Container = styled.div`\npadding: ${advancedSearchPadding};\n`\n\nconst SliderContainer = styled.div`\n    padding-left: 6px;\n    padding-right: 6px;\n`\n\nconst TextFieldsContainer = styled.div`\n    display: flex;\n    width: 100%;\n    margin-top: 4px;\n`\n\nconst TextFieldWithMargin = styled(TextField)`\n    margin-right: ${props => props.marginright} !important;\n`\n\nfunction SliderFilter(props) {\n    const [inputValue, setInputValue] = useState([0, 100]);\n    const [sliderValue, setSliderValue] = useState([0, 100]);\n    const [isFocusTextFields, setIsFocusTextFields] = useState(false);\n    const [isDefaultSet, setIsDefaultSet] = useState(false);\n\n    const handleSliderChange = (event, newValue) => {\n        setSliderValue(newValue);\n        setInputValue(newValue);\n    };\n\n    useEffect(() => {\n        if (!isNaN(inputValue[0]) && !isNaN(inputValue[1]) && (inputValue[0] !== \"\" && inputValue[1] !== \"\")) {\n            if ((inputValue[0] >= 0 && inputValue[0] <= 100) &&\n                (inputValue[1] >= 0 && inputValue[1] <= 100)) {\n                setSliderValue(inputValue);\n                if (isFocusTextFields) {\n                    sendSliderValue(inputValue);\n                }\n            }\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [inputValue])\n\n\n    useEffect(() => {\n        if (props.value && props.value[0] !== \"\" && isDefaultSet === false) {\n            let min = parseInt(props.value[0]);\n            let max = parseInt(props.value[1]);\n            setSliderValue([min, max]);\n            setInputValue([min, max]);\n            setIsDefaultSet(true);\n        }\n    }, [props.value, isDefaultSet])\n\n    const onChange = (type, evt) => {\n        let items = [...inputValue];\n        let minValue = items[0]\n        let maxValue = items[1];\n        let newValue = parseInt(evt.target.value);\n\n        if (isNaN(newValue)) {\n            newValue = \"\";\n        }\n\n        if (type === \"min\") {\n            minValue = newValue;\n            items[0] = minValue;\n        } else {\n            maxValue = newValue;\n            items[1] = maxValue;\n        }\n\n        setInputValue(items);\n    }\n\n    const sendSliderValue = (inputValue) => {\n        let results = {\n            title: props.title,\n            type: \"slider\",\n            slug: props.slug,\n            replace: true,\n            data: {\n                minimum: inputValue[0],\n                maximum: inputValue[1]\n            }\n        }\n        if (props.onChange) {\n            props.onChange(results);\n        }\n    }\n\n    return (\n        <Container>\n            <SliderContainer>\n                <Slider\n                    value={sliderValue}\n                    onChange={handleSliderChange}\n                    valueLabelDisplay=\"auto\"\n                    aria-labelledby=\"range-slider\"\n                    onChangeCommitted={() => sendSliderValue(sliderValue)}\n                />\n            </SliderContainer>\n            <TextFieldsContainer>\n                <TextFieldWithMargin\n                    marginright={\"4px\"}\n                    variant=\"outlined\"\n                    type=\"number\"\n                    value={inputValue[0]}\n                    onChange={(text) => onChange(\"min\", text)}\n                    label=\"Minimum\" \n                    onFocus={() => setIsFocusTextFields(true)}\n                    onBlur={() => setIsFocusTextFields(false)}\n                />\n                <TextFieldWithMargin\n                    marginright={\"0\"}\n                    variant=\"outlined\"\n                    type=\"number\"\n                    value={inputValue[1]}\n                    onChange={(text) => onChange(\"max\", text)} label=\"Maximum\"\n                    onFocus={() => setIsFocusTextFields(true)}\n                    onBlur={() => setIsFocusTextFields(false)}\n                />\n            </TextFieldsContainer>\n        </Container>\n    )\n}\n\nSliderFilter.propTypes = {\n    title: PropTypes.string.isRequired,\n    onChange: PropTypes.func,\n    value: PropTypes.array,\n    slug: PropTypes.string\n}\n\nexport default SliderFilter\n\n"]},"metadata":{},"sourceType":"module"}