{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bdeguigne/Documents/Game Bringer/src/components/Advanced Search/TextFieldFilter.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Autocomplete } from '@material-ui/lab';\nimport { TextField } from '@material-ui/core';\nimport { advancedSearchPadding } from '../../utils/styles';\nimport styled from 'styled-components';\nimport CircularProgress from '@material-ui/core/CircularProgress'; //REDUX\n\nimport { searchByName } from '../../redux/actions/filtersActions';\nimport { Refresh } from '@material-ui/icons';\nconst Container = styled.div`\n    padding: ${advancedSearchPadding};\n`;\n_c = Container;\n\nconst TextFieldFilter = props => {\n  _s();\n\n  const [suggestionsData, setSuggestionsData] = useState([]);\n  const [value, setValue] = useState([]); // const [defaultSet, setDefaultSet] = useState(false);\n\n  const [correctDefault, setcorrectDefault] = useState(false);\n  const [excludeData, setExcludeData] = useState([]);\n  const [excludeDataLabel, setExcludeDataLabel] = useState([]);\n\n  const isExclude = element => {\n    let isExclude = false;\n\n    if (props.excludeLabel) {\n      props.excludeLabel.forEach(exclude => {\n        if (exclude === element) {\n          isExclude = true;\n        }\n      });\n    }\n\n    return isExclude;\n  };\n\n  const onInputChange = (evt, value, reason) => {\n    if (props.searchResults.length === 0) {\n      props.searchByName(props.endpoint, \"\", props.slug, props.exclude);\n    }\n  };\n\n  const onChange = (evt, value, reason) => {\n    setValue(value);\n    const options = Array.prototype.map.call(value, function (item) {\n      return item.id;\n    }).join(\",\");\n    const labels = Array.prototype.map.call(value, function (item) {\n      return item.name;\n    }).join(\",\");\n    sendChange(options, labels);\n  };\n\n  const onOpen = () => {\n    if (props.searchResults.length === 0) {\n      props.searchByName(props.endpoint, \"\", props.slug, props.exclude);\n    } else {\n      let isExist = false;\n      props.searchResults.forEach(element => {\n        if (element[props.slug]) {\n          isExist = true;\n        }\n      });\n\n      if (!isExist) {\n        props.searchByName(props.endpoint, \"\", props.slug, props.exclude);\n      }\n    }\n  };\n\n  const sendChange = (data, label) => {\n    let separator = \",\";\n    let excludeComma = excludeData.join(\",\");\n    let excludeCommaLabel = excludeDataLabel.join(\",\");\n\n    if (data === \"\" || excludeData.length === 0) {\n      separator = \"\";\n    }\n\n    let results = {\n      title: props.title,\n      slug: props.slug,\n      type: \"textField\",\n      data: data.concat(separator + excludeComma),\n      label: label.concat(separator + excludeCommaLabel)\n    };\n\n    if (props.onChange) {\n      props.onChange(results);\n    }\n  };\n\n  useEffect(() => {\n    props.searchResults.forEach(element => {\n      let result = element[props.slug];\n\n      if (result) {\n        var correctData = [];\n        setSuggestionsData(result);\n\n        if (correctDefault === false && props.isCorrectSet) {\n          props.valueLabel.forEach(query => {\n            result.forEach(element => {\n              if (element.name === query) {\n                correctData.push(element);\n              }\n            });\n          });\n          setValue(correctData);\n          setcorrectDefault(true);\n        }\n      }\n    });\n  }, [props.searchResults, props.slug]);\n  useEffect(() => {\n    // if (defaultSet === false) {\n    //     props.valueLabel.forEach(element => {\n    //         if (element !== \"\") {\n    //             !isExclude(element) && setValue(value => [...value, { name: element, id: element }])\n    //         }\n    //     });\n    //     setDefaultSet(true)\n    // }\n    if (props.exclude && props.excludeLabel) {\n      let excludeValue = [];\n      let excludeLabel = [];\n      props.value.forEach(element => {\n        props.exclude.forEach((excludeElement, index) => {\n          if (excludeElement === element) {\n            excludeValue.push(element);\n            excludeLabel.push(props.excludeLabel[index]);\n          }\n        });\n      });\n      setExcludeData(excludeValue);\n      setExcludeDataLabel(excludeLabel);\n    }\n  }, [props.value, props.exclude]);\n  useEffect(() => {\n    if (props.valueLabel && props.valueLabel.join(\",\") && props.isCorrectSet && correctDefault === false) {\n      let correct = props.valueLabel.filter(value => !isExclude(value));\n      setValue(correct);\n    }\n  }, [props.valueLabel, props.isCorrectSet]);\n  useEffect(() => {\n    // setValue(props.activatedFilters.front[props.slug].split(\",\"));\n    // console.log(\"REFRESH TEXT FIELDS\", props.activatedFilters, props.value)\n    // console.log(\"REFRESH TEXT FIELDS\", props.activatedFilters, props.valueLabel, suggestionsData);\n    let change = false;\n    var correctData = [];\n\n    if (props.value.join(\",\") === \"\") {\n      correctData = [];\n      change = true;\n    }\n\n    if (suggestionsData && props.valueLabel) {\n      // console.log(\"VALUELABL\", props.valueLabel)\n      suggestionsData.forEach(element => {\n        if (element) {\n          props.valueLabel.forEach(query => {\n            if (element.name === query) {\n              change = true;\n              correctData.push(element);\n            }\n          });\n        }\n      }); // console.log(\"CORRECT DATA\", correctData, change);\n\n      if (change === true) {\n        setValue(correctData);\n      }\n    }\n  }, [props.refresh]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      multiple: true,\n      options: suggestionsData,\n      getOptionLabel: option => option.name || option,\n      getOptionSelected: (option, value) => option.name === value.name || option === value,\n      loading: props.isRequest,\n      limitTags: 1,\n      loadingText: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 30\n      }, this),\n      value: value,\n      size: \"small\",\n      ChipProps: {\n        color: \"primary\"\n      },\n      onOpen: onOpen,\n      onChange: onChange,\n      onInputChange: onInputChange,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        variant: \"outlined\",\n        label: props.label,\n        placeholder: props.placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TextFieldFilter, \"1ryd/iHizqdWe+D2gd20isYyfw8=\");\n\n_c2 = TextFieldFilter;\nTextFieldFilter.propTypes = {\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.array,\n  valueLabel: PropTypes.array,\n  slug: PropTypes.string,\n  endpoint: PropTypes.string,\n  exclude: PropTypes.array,\n  excludeLabel: PropTypes.array,\n  refresh: PropTypes.number,\n  activatedFilters: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  isRequest: state.filtersReducer.textFieldSearchResult.isRequest,\n  searchResults: state.filtersReducer.textFieldSearchResult.res,\n  isCorrectSet: state.uiReducer.isCorrectIds\n});\n\nconst mapDispatchToProps = {\n  searchByName\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TextFieldFilter);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"TextFieldFilter\");","map":{"version":3,"sources":["/Users/bdeguigne/Documents/Game Bringer/src/components/Advanced Search/TextFieldFilter.js"],"names":["React","useEffect","useState","PropTypes","connect","Autocomplete","TextField","advancedSearchPadding","styled","CircularProgress","searchByName","Refresh","Container","div","TextFieldFilter","props","suggestionsData","setSuggestionsData","value","setValue","correctDefault","setcorrectDefault","excludeData","setExcludeData","excludeDataLabel","setExcludeDataLabel","isExclude","element","excludeLabel","forEach","exclude","onInputChange","evt","reason","searchResults","length","endpoint","slug","onChange","options","Array","prototype","map","call","item","id","join","labels","name","sendChange","onOpen","isExist","data","label","separator","excludeComma","excludeCommaLabel","results","title","type","concat","result","correctData","isCorrectSet","valueLabel","query","push","excludeValue","excludeElement","index","correct","filter","change","refresh","option","isRequest","color","params","placeholder","propTypes","string","isRequired","array","number","activatedFilters","object","mapStateToProps","state","filtersReducer","textFieldSearchResult","res","uiReducer","isCorrectIds","mapDispatchToProps"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Autocomplete } from '@material-ui/lab'\nimport { TextField } from '@material-ui/core'\nimport { advancedSearchPadding } from '../../utils/styles'\nimport styled from 'styled-components';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n//REDUX\nimport { searchByName } from '../../redux/actions/filtersActions';\nimport { Refresh } from '@material-ui/icons'\n\nconst Container = styled.div`\n    padding: ${advancedSearchPadding};\n`\n\nconst TextFieldFilter = (props) => {\n    const [suggestionsData, setSuggestionsData] = useState([]);\n    const [value, setValue] = useState([]);\n    // const [defaultSet, setDefaultSet] = useState(false);\n    const [correctDefault, setcorrectDefault] = useState(false);\n    const [excludeData, setExcludeData] = useState([]);\n    const [excludeDataLabel, setExcludeDataLabel] = useState([]);\n\n    const isExclude = (element) => {\n        let isExclude = false;\n\n\n        if (props.excludeLabel) {\n            props.excludeLabel.forEach(exclude => {\n                if (exclude === element) {\n                    isExclude = true;\n                }\n            })\n        }\n\n        return isExclude;\n    }\n\n    const onInputChange = (evt, value, reason) => {\n        if (props.searchResults.length === 0) {\n            props.searchByName(props.endpoint, \"\", props.slug, props.exclude);\n        }\n    }\n\n    const onChange = (evt, value, reason) => {\n        setValue(value)\n        const options = Array.prototype.map.call(value,\n            function (item) {\n                return item.id;\n            }).join(\",\");\n\n        const labels = Array.prototype.map.call(value,\n            function (item) {\n                return item.name;\n            }).join(\",\");\n\n        sendChange(options, labels);\n    }\n\n    const onOpen = () => {\n        if (props.searchResults.length === 0) {\n            props.searchByName(props.endpoint, \"\", props.slug, props.exclude);\n        } else {\n            let isExist = false;\n            props.searchResults.forEach(element => {\n                if (element[props.slug]) {\n                    isExist = true;\n                }\n            });\n            if (!isExist) {\n                props.searchByName(props.endpoint, \"\", props.slug, props.exclude);\n            }\n        }\n    }\n\n    const sendChange = (data, label) => {\n        let separator = \",\";\n        let excludeComma = excludeData.join(\",\");\n        let excludeCommaLabel = excludeDataLabel.join(\",\");\n        if (data === \"\" || excludeData.length === 0) {\n            separator = \"\";\n        }\n\n        let results = {\n            title: props.title,\n            slug: props.slug,\n            type: \"textField\",\n            data: data.concat(separator + excludeComma),\n            label: label.concat(separator + excludeCommaLabel),\n        }\n        if (props.onChange) {\n            props.onChange(results);\n        }\n\n    }\n\n    useEffect(() => {\n        props.searchResults.forEach(element => {\n            let result = element[props.slug];\n            if (result) {\n                var correctData = [];\n                setSuggestionsData(result);\n\n                if (correctDefault === false && props.isCorrectSet) {\n                    props.valueLabel.forEach(query => {\n                        result.forEach(element => {\n                            if (element.name === query) {\n                                correctData.push(element);\n                            }\n                        })\n                    })\n                    setValue(correctData);\n                    setcorrectDefault(true);\n                }\n            }\n        });\n\n    }, [props.searchResults, props.slug])\n\n    useEffect(() => {\n        // if (defaultSet === false) {\n        //     props.valueLabel.forEach(element => {\n        //         if (element !== \"\") {\n        //             !isExclude(element) && setValue(value => [...value, { name: element, id: element }])\n        //         }\n        //     });\n\n        //     setDefaultSet(true)\n        // }\n        if (props.exclude && props.excludeLabel) {\n            let excludeValue = [];\n            let excludeLabel = [];\n            props.value.forEach(element => {\n                props.exclude.forEach((excludeElement, index) => {\n                    if (excludeElement === element) {\n                        excludeValue.push(element)\n                        excludeLabel.push(props.excludeLabel[index])\n                    }\n                })\n            })\n\n            setExcludeData(excludeValue);\n            setExcludeDataLabel(excludeLabel);\n        }\n\n    }, [props.value, props.exclude])\n\n    useEffect(() => {\n        if (props.valueLabel && props.valueLabel.join(\",\") && props.isCorrectSet && correctDefault === false) {\n            let correct = props.valueLabel.filter(value => !isExclude(value))\n            setValue(correct)\n        }\n    }, [props.valueLabel, props.isCorrectSet])\n\n    useEffect(() => {\n        // setValue(props.activatedFilters.front[props.slug].split(\",\"));\n        // console.log(\"REFRESH TEXT FIELDS\", props.activatedFilters, props.value)\n        // console.log(\"REFRESH TEXT FIELDS\", props.activatedFilters, props.valueLabel, suggestionsData);\n        let change = false\n        var correctData = [];\n\n        if (props.value.join(\",\") === \"\") {\n            correctData = [];\n            change = true;\n        }\n\n        if (suggestionsData && props.valueLabel) {\n            // console.log(\"VALUELABL\", props.valueLabel)\n            suggestionsData.forEach(element => {\n                if (element) {\n                    props.valueLabel.forEach(query => {\n                        if (element.name === query) {\n                            change = true;\n                            correctData.push(element);\n                        }\n                    })\n                }\n            });\n            // console.log(\"CORRECT DATA\", correctData, change);\n\n            if (change === true) {\n                setValue(correctData);\n            }\n        }\n    }, [props.refresh])\n\n    return (\n        <Container>\n            <Autocomplete\n                multiple\n                options={suggestionsData}\n                getOptionLabel={(option) => option.name || option}\n                getOptionSelected={(option, value) => (option.name === value.name) || option === value}\n                loading={props.isRequest}\n                limitTags={1}\n                loadingText={<CircularProgress />}\n                value={value}\n                size=\"small\"\n                ChipProps={{ color: \"primary\" }}\n                onOpen={onOpen}\n                onChange={onChange}\n                onInputChange={onInputChange}\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        variant=\"outlined\"\n                        label={props.label}\n                        placeholder={props.placeholder}\n                    />\n                )}\n            />\n        </Container>\n    )\n}\n\nTextFieldFilter.propTypes = {\n    label: PropTypes.string.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    value: PropTypes.array,\n    valueLabel: PropTypes.array,\n    slug: PropTypes.string,\n    endpoint: PropTypes.string,\n    exclude: PropTypes.array,\n    excludeLabel: PropTypes.array,\n    refresh: PropTypes.number,\n    activatedFilters: PropTypes.object\n}\n\nconst mapStateToProps = (state) => ({\n    isRequest: state.filtersReducer.textFieldSearchResult.isRequest,\n    searchResults: state.filtersReducer.textFieldSearchResult.res,\n    isCorrectSet: state.uiReducer.isCorrectIds\n})\n\nconst mapDispatchToProps = {\n    searchByName\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TextFieldFilter)\n"]},"metadata":{},"sourceType":"module"}